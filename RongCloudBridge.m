#import "RongCloudBridge.h"
#import <RongIMLib/RongIMLib.h>   // Ëûç‰∫ë SDK

void rongCloudInit(const char *appKey, const char *region) {
    if (!appKey) {
        NSLog(@"[RC] ‚ùå appKey is NULL");
        return;
    }
    NSString *key = [NSString stringWithUTF8String:appKey];
    NSString *regionName = region ? [NSString stringWithUTF8String:region] : @"BJ"; // ÈªòËÆ§Âåó‰∫¨
    /* Êò†Â∞ÑË°®ÔºöÊñ∞Â¢ûÂú∞Âå∫Âè™Âä†‰∏ÄË°å */
    NSDictionary *regionMap = @{
            @"BJ"  : @(RCAreaCodeBJ),
            @"NA"  : @(RCAreaCodeNA),
            @"SG"  : @(RCAreaCodeSG),
            @"SG_B": @(RCAreaCodeSG_B),
            @"SA"  : @(RCAreaCodeSA)
    };
    RCAreaCode area = [regionMap[regionName] integerValue] ?: RCAreaCodeBJ; // ÂÖúÂ∫ïÂåó‰∫¨
    RCInitOption *initOption = [[RCInitOption alloc] init];
    initOption.areaCode = area;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSLog(@"[RC] rongCloudInit: AppKey=%@, region=%@ ‚Üí areaCode=%ld",
                key, regionName, (long)area);
        [[RCCoreClient sharedCoreClient] initWithAppKey:key option:initOption];
    });
}

void rongCloudConnect(const char *token, id <RongCloudConnectCallback> callback) {
    NSString *tk = [NSString stringWithUTF8String:token ?: ""];
    dispatch_async(dispatch_get_main_queue(), ^{
        NSLog(@"[RC] rongCloudConnect connectWithToken token=%@ timeLimit:30", tk);
        // 30 ÁßíËøûÊé•Ë∂ÖÊó∂
        [[RCCoreClient sharedCoreClient] connectWithToken:tk timeLimit:30
                                                 dbOpened:^(RCDBErrorCode dbCode) {
                                                     NSLog(@"[RC] dbOpened -> dbCode=%ld", (long) dbCode);
                                                     [callback onDBOpened:(int32_t) dbCode];
                                                 }
                                                  success:^(NSString *userId) {
                                                      NSLog(@"[RC] connect success -> userId=%@", userId);
                                                      [callback onSuccess:[userId UTF8String]];
                                                  }
                                                    error:^(RCConnectErrorCode errorCode) {
                                                        NSLog(@"[RC] connect error -> errorCode=%ld", (long) errorCode);
                                                        if (errorCode == RC_CONN_TOKEN_INCORRECT) {
                                                            //Token ÈîôËØØÔºåÂèØÊ£ÄÊü•ÂÆ¢Êà∑Á´Ø SDK ÂàùÂßãÂåñ‰∏é App ÊúçÂä°Á´ØËé∑Âèñ Token Êó∂ÊâÄ‰ΩøÁî®ÁöÑ App Key ÊòØÂê¶‰∏ÄËá¥
                                                            NSLog(@"[RC] errorCode=%ld Token ÈîôËØØÔºåÂèØÊ£ÄÊü•ÂÆ¢Êà∑Á´Ø SDK ÂàùÂßãÂåñ‰∏é App ÊúçÂä°Á´ØËé∑Âèñ Token Êó∂ÊâÄ‰ΩøÁî®ÁöÑ App Key ÊòØÂê¶‰∏ÄËá¥", (long) errorCode);
                                                        } else if(errorCode == RC_CONNECT_TIMEOUT) {
                                                            //ËøûÊé•Ë∂ÖÊó∂ÔºåÂºπÂá∫ÊèêÁ§∫ÔºåÂèØ‰ª•ÂºïÂØºÁî®Êà∑Á≠âÂæÖÁΩëÁªúÊ≠£Â∏∏ÁöÑÊó∂ÂÄôÂÜçÊ¨°ÁÇπÂáªËøõË°åËøûÊé•
                                                            NSLog(@"[RC] errorCode=%ld ËøûÊé•Ë∂ÖÊó∂ÔºåÂºπÂá∫ÊèêÁ§∫ÔºåÂèØ‰ª•ÂºïÂØºÁî®Êà∑Á≠âÂæÖÁΩëÁªúÊ≠£Â∏∏ÁöÑÊó∂ÂÄôÂÜçÊ¨°ÁÇπÂáªËøõË°åËøûÊé•", (long) errorCode);
                                                        } else {
                                                            //Êó†Ê≥ïËøûÊé• IM ÊúçÂä°Âô®ÔºåËØ∑Ê†πÊçÆÁõ∏Â∫îÁöÑÈîôËØØÁ†Å‰ΩúÂá∫ÂØπÂ∫îÂ§ÑÁêÜ
                                                            NSLog(@"[RC] errorCode=%ld Êó†Ê≥ïËøûÊé• IM ÊúçÂä°Âô®ÔºåËØ∑Ê†πÊçÆÁõ∏Â∫îÁöÑÈîôËØØÁ†Å‰ΩúÂá∫ÂØπÂ∫îÂ§ÑÁêÜ", (long) errorCode);
                                                        }
                                                        [callback onError:(int32_t) errorCode];
                                                    }
        ];
    });
}

void rongCloudDisconnect(bool allowPush) {
    dispatch_async(dispatch_get_main_queue(), ^{
        if (allowPush) {
            [[RCCoreClient sharedCoreClient] disconnect:YES];   // Êé•Êî∂Á¶ªÁ∫øÊé®ÈÄÅ
        } else {
            [[RCCoreClient sharedCoreClient] disconnect];       // ÂÅúÊ≠¢Êé®ÈÄÅ
        }
    });
}

void rongCloudReconnectEnable(bool enable) {
    dispatch_async(dispatch_get_main_queue(), ^{
        if (enable) {
            [[RCCoreClient sharedCoreClient] setReconnectKickEnable:YES];
        } else {
            [[RCCoreClient sharedCoreClient] setReconnectKickEnable:NO];
        }
    });
}

/* Êää RCConnectionStatus Êò†Â∞ÑÊàê Kotlin ÂèØËØªÁöÑ int32_t */
int32_t rongCloudGetConnectionStatus(void) {
    int32_t status = (int32_t)[[RCCoreClient sharedCoreClient] getConnectionStatus];
    NSLog(@"[RC] getConnectionStatus -> %d", status);
    return status;
}

id <RCDatabaseUpgradeCallback> gRcDatabaseUpgradeCallback = NULL;

@interface RongDatabaseStatusListener : NSObject <RCDatabaseStatusDelegate>
@end

@implementation RongDatabaseStatusListener
- (void)databaseUpgradeWillStart {
    if (gRcDatabaseUpgradeCallback) {
        [gRcDatabaseUpgradeCallback upgradeWillStart];
    }
}

- (void)databaseIsUpgrading:(int)progress {
    if (gRcDatabaseUpgradeCallback) {
        [gRcDatabaseUpgradeCallback upgrading:(int32_t) progress];
    }
}

- (void)databaseUpgradeDidComplete:(RCErrorCode)code {
    if (gRcDatabaseUpgradeCallback) {
        [gRcDatabaseUpgradeCallback upgradeComplete:(int32_t) code];
    }
}

@end

static RongDatabaseStatusListener *gDatabaseStatusDelegate = nil;
void rongCloudAddDatabaseStatusListener(id <RCDatabaseUpgradeCallback> listener) {
    dispatch_async(dispatch_get_main_queue(), ^{
        gRcDatabaseUpgradeCallback = listener;
        if (listener && !gDatabaseStatusDelegate) {
            gDatabaseStatusDelegate = [RongDatabaseStatusListener new];
            [[RCCoreClient sharedCoreClient] addDatabaseStatusDelegate:gDatabaseStatusDelegate];
        } else if (!listener && gDatabaseStatusDelegate) {
            [[RCCoreClient sharedCoreClient] removeDatabaseStatusDelegate:gDatabaseStatusDelegate];
            gDatabaseStatusDelegate = nil;
        }
    });
}

const char *rongCloudGetSDKVersion(void) {
    // NSString ‚Üí UTF-8
    return [[RCCoreClient getVersion] UTF8String];
}

id <RCConnectionStatusListener> gRcConnectionStatusListener = NULL;

@interface RongConnectionStatusListener : NSObject <RCConnectionStatusChangeDelegate>
@end

@implementation RongConnectionStatusListener
- (void)onConnectionStatusChanged:(RCConnectionStatus)status {
    /** https://doc.rongcloud.cn/apidoc/imlibcore-ios/latest/zh_CN/documentation/rongimlibcore/rcconnectionstatus?language=objc */
    NSLog(@"[RC] onConnectionStatusChanged rawCode = %ld", (long)status);
    switch (status) {
        case ConnectionStatus_Connected:
            NSLog(@"[RC] ‚úÖ ËøûÊé•ÊàêÂäü");
            break;
        case ConnectionStatus_Connecting:
            NSLog(@"[RC] ‚è≥ ËøûÊé•‰∏≠...");
            break;
        case ConnectionStatus_DISCONN_EXCEPTION:
            NSLog(@"[RC] ‚ùå ‰∏éÊúçÂä°Âô®ÁöÑËøûÊé•Â∑≤Êñ≠ÂºÄÔºåÁî®Êà∑Ë¢´Â∞ÅÁ¶Å");
            break;
        case ConnectionStatus_KICKED_OFFLINE_BY_OTHER_CLIENT:
            NSLog(@"[RC] üö™ ÂΩìÂâçÁî®Êà∑Âú®ÂÖ∂‰ªñËÆæÂ§áÁôªÂΩïÔºåÊ≠§ËÆæÂ§áË¢´Ë∏¢‰∏ãÁ∫ø");
            break;
        case ConnectionStatus_NETWORK_UNAVAILABLE:
            NSLog(@"[RC] üì° ÁΩëÁªú‰∏çÂèØÁî®ÔºåSDK ‰ºöËá™Âä®ÈáçËøû");
            break;
        case ConnectionStatus_PROXY_UNAVAILABLE:
            NSLog(@"[RC] üß± Proxy ‰∏çÂèØÁî®ÔºåÈúÄË¶ÅÊ£ÄÊü•‰ª£ÁêÜÂêéÊâãÂä®ÈáçËøû");
            break;
        case ConnectionStatus_SignOut:
            NSLog(@"[RC] üö™ Â∑≤ÁôªÂá∫");
            break;
        case ConnectionStatus_Suspend:
            NSLog(@"[RC] ‚è∏Ô∏è ËøûÊé•Ë¢´ÊåÇËµ∑ÔºàÁΩëÁªúÊäñÂä®ÔºâÔºåSDK ‰ºöËá™Âä®ÈáçËøû");
            break;
        case ConnectionStatus_TOKEN_INCORRECT:
            NSLog(@"[RC] üîë Token Êó†Êïà/ËøáÊúüÔºåÈúÄÈáçÊñ∞Ëé∑Âèñ");
            break;
        case ConnectionStatus_Timeout:
            NSLog(@"[RC] ‚è±Ô∏è Ëá™Âä®ËøûÊé•Ë∂ÖÊó∂ÔºåÈúÄÊâãÂä®ÈáçËøû");
            break;
        case ConnectionStatus_UNKNOWN:
            NSLog(@"[RC] ‚ùì Êú™Áü•‰∏¥Êó∂Áä∂ÊÄÅÔºåSDK ‰ºöËá™Âä®ÈáçËøû");
            break;
        case ConnectionStatus_USER_ABANDON:
            NSLog(@"[RC] üóëÔ∏è Áî®Êà∑Ë¥¶Âè∑Â∑≤ÈîÄÊà∑Ôºå‰∏çÂÜçËøûÊé•");
            break;
        case ConnectionStatus_Unconnected:
            NSLog(@"[RC] üîå ËøûÊé•Â§±Ë¥•ÊàñÊú™ËøûÊé•");
            break;
        default:
            NSLog(@"[RC] ‚ö†Ô∏è Êú™Êò†Â∞ÑÁä∂ÊÄÅ code=%ld", (long)status);
            break;
    }

    /* Âõû‰º† Kotlin */
    if (gRcConnectionStatusListener) {
        NSLog(@"[RC] connect status -> code=%ld", (long) status);
        [gRcConnectionStatusListener onChanged:(int32_t) status];
    }
}
@end

static RongConnectionStatusListener *gConnectionStatusDelegate = nil;

void rongCloudAddConnectionStatusListener(id <RCConnectionStatusListener> listener) {
    dispatch_async(dispatch_get_main_queue(), ^{
        gRcConnectionStatusListener = listener;
        if (listener && !gConnectionStatusDelegate) {
            gConnectionStatusDelegate = [RongConnectionStatusListener new];
            [[RCCoreClient sharedCoreClient] addConnectionStatusChangeDelegate:gConnectionStatusDelegate];
        } else if (!listener && gConnectionStatusDelegate) {
            [[RCCoreClient sharedCoreClient] removeConnectionStatusChangeDelegate:gConnectionStatusDelegate];
            gConnectionStatusDelegate = nil;
        }
    });
}

void rongCloudSendMessage(int type, const char *targetId, const char *text) {
    NSString *targetUserId = targetId ? [NSString stringWithUTF8String:targetId]
            : @"";
    NSString *content = text ? [NSString stringWithUTF8String:text]
            : @"";

    NSLog(@"[RC] input: type=%d, target=%@, text=%@", type, targetUserId, content);
    if (targetUserId.length == 0 || content.length == 0) {
        NSLog(@"[RC] ‚ö†Ô∏è targetId or text is empty, abort send!");
        return;
    }
    dispatch_async(dispatch_get_main_queue(), ^{
        RCTextMessage *msgContent = [RCTextMessage messageWithContent:content];
        RCConversationType convType;
        switch (type) {
            case 1:  convType = ConversationType_PRIVATE;   break;
            case 2:  convType = ConversationType_DISCUSSION;    break;
            case 3:  convType = ConversationType_GROUP; break;
            case 4:  convType = ConversationType_CHATROOM; break;
            case 5:  convType = ConversationType_CUSTOMERSERVICE;   break;
            case 6:  convType = ConversationType_SYSTEM;   break;
            case 7:  convType = ConversationType_APPSERVICE; break;
            case 8:  convType = ConversationType_PUBLICSERVICE; break;
            case 9:  convType = ConversationType_PUSHSERVICE; break;
            case 10:  convType = ConversationType_ULTRAGROUP; break;
            case 11:  convType = ConversationType_Encrypted; break;
            case 12:  convType = ConversationType_RTC; break;
            default: convType = ConversationType_INVALID;   break;
        }
        RCMessage *message = [[RCMessage alloc] initWithType:convType
                                                    targetId:targetUserId
                                                   direction:MessageDirection_SEND
                                                     content:msgContent];
        NSLog(@"[RC] sendMessage start: type=%d, target=%@, text=%@", type, targetUserId, content);
        // ÂèëÈÄÅÊ∂àÊÅØ
        [[RCCoreClient sharedCoreClient]
                sendMessage:message
                pushContent:nil
                   pushData:nil
                   attached:^(RCMessage *successMessage) {
                       //ÂÖ•Â∫ìÊàêÂäü
                       NSLog(@"[RC] sendMessage attached (db ok) -> messageId=%ld",
                               successMessage.messageId);
                   }
               successBlock:^(RCMessage *successMessage) {
                      //ÊàêÂäü
                   NSLog(@"[RC] sendMessage success -> messageId=%ld",
                           successMessage.messageId);
               }
                 errorBlock:^(RCErrorCode nErrorCode, RCMessage *errorMessage) {
                     //Â§±Ë¥•
                     NSLog(@"[RC] sendMessage error -> code=%ld, messageId=%ld",
                             (long)nErrorCode, errorMessage.messageId);
                 }];
    });
}
